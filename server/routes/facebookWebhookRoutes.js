const express = require("express");
const router = express.Router();
const axios = require("axios");
const { parseOrderFromMessage } = require("../services/openaiService");
const { updateOrder, getOrder, clearOrder, validateOrder, createOrder } = require("../services/orderService");

const VERIFY_TOKEN = process.env.VERIFY_TOKEN || "verify_token";
const PAGE_ACCESS_TOKEN = process.env.FB_PAGE_ACCESS_TOKEN || "EAAG..."; // üîí Thay b·∫±ng token th·∫≠t c·ªßa b·∫°n
const PAGE_ID = process.env.FB_PAGE_ID;

// Cache ƒë·ªÉ l∆∞u c√°c tin nh·∫Øn ƒë√£ x·ª≠ l√Ω
const processedMessages = new Set();
const CACHE_TIMEOUT = 60000; // 60 seconds

// H√†m ki·ªÉm tra tin nh·∫Øn ch√†o h·ªèi
function isGreeting(message) {
    const greetings = ['xin ch√†o', 'ch√†o', 'hi', 'hello', 'hey'];
    return greetings.some(greeting => message.toLowerCase().includes(greeting));
}

// H√†m ki·ªÉm tra x√°c nh·∫≠n ƒë∆°n h√†ng
function isOrderConfirmation(message) {
    const confirmations = ['x√°c nh·∫≠n ƒë∆°n', 'x√°c nh·∫≠n', 'ƒë·ªìng √Ω', 'ok'];
    return confirmations.some(confirm => message.toLowerCase().includes(confirm));
}

// H√†m t·∫°o tin nh·∫Øn x√°c nh·∫≠n ƒë∆°n h√†ng
function createOrderConfirmMessage(order) {
    return `üì¶ X√°c nh·∫≠n ƒë∆°n h√†ng:
üßë Ng∆∞·ªùi nh·∫≠n: ${order.receiver_name}
üìû SƒêT: ${order.receiver_phone}
üìç ƒê·ªãa ch·ªâ: ${order.address.house_number} ${order.address.street}, ${order.address.ward}, ${order.address.district}, ${order.address.province}
üõí S·∫£n ph·∫©m: ${order.products}${order.extra ? `\nüìù Y√™u c·∫ßu th√™m: ${order.extra}` : ""}

‚úÖ Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin tr√™n.
üëâ N·∫øu th√¥ng tin ch√≠nh x√°c, h√£y nh·∫Øn "X√°c nh·∫≠n ƒë∆°n" ƒë·ªÉ ho√†n t·∫•t ƒë·∫∑t h√†ng.
‚ùå N·∫øu c·∫ßn ch·ªânh s·ª≠a, vui l√≤ng nh·∫Øn l·∫°i th√¥ng tin c·∫ßn thay ƒë·ªïi.`;
}

// ‚öôÔ∏è X√°c th·ª±c webhook t·ª´ Facebook
router.get("/", (req, res) => {
    const mode = req.query["hub.mode"];
    const token = req.query["hub.verify_token"];
    const challenge = req.query["hub.challenge"];

    if (mode && token === VERIFY_TOKEN) {
        console.log("‚úÖ Webhook verified!");
        return res.status(200).send(challenge);
    } else {
        console.log("‚ùå Verification failed");
        return res.sendStatus(403);
    }
});

// üì¨ X·ª≠ l√Ω khi c√≥ tin nh·∫Øn g·ª≠i t·ª´ Messenger v√†o
router.post("/", async (req, res) => {
    const body = req.body;

    if (body.object === "page") {
        for (const entry of body.entry) {
            if (PAGE_ID && entry.id !== PAGE_ID) continue;

            const webhookEvent = entry.messaging[0];
            if (!webhookEvent || !webhookEvent.sender) continue;

            const senderId = webhookEvent.sender.id;

            if (webhookEvent.message && webhookEvent.message.text) {
                if (webhookEvent.message.is_echo) return;

                const userMsg = webhookEvent.message.text;
                const messageId = webhookEvent.message.mid;

                // Ki·ªÉm tra xem tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ch∆∞a
                if (processedMessages.has(messageId)) {
                    return res.status(200).send("DUPLICATE_MESSAGE");
                }

                // Th√™m tin nh·∫Øn v√†o cache
                processedMessages.add(messageId);
                setTimeout(() => processedMessages.delete(messageId), CACHE_TIMEOUT);

                console.log("üì® Tin nh·∫Øn t·ª´ user:", userMsg);

                // X·ª≠ l√Ω tin nh·∫Øn ch√†o h·ªèi
                if (isGreeting(userMsg)) {
                    await sendMessage(senderId, `Xin ch√†o! Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi shop linh ki·ªán laptop/PC c·ªßa ch√∫ng t√¥i üñ•Ô∏è

ƒê·ªÉ ƒë·∫∑t h√†ng, vui l√≤ng cung c·∫•p c√°c th√¥ng tin sau:
- T√™n ng∆∞·ªùi nh·∫≠n
- S·ªë ƒëi·ªán tho·∫°i li√™n h·ªá
- ƒê·ªãa ch·ªâ giao h√†ng ƒë·∫ßy ƒë·ªß (s·ªë nh√†, ƒë∆∞·ªùng, ph∆∞·ªùng/x√£, qu·∫≠n/huy·ªán, t·ªânh/th√†nh)
- T√™n s·∫£n ph·∫©m/linh ki·ªán c·∫ßn mua (v√≠ d·ª•: RAM DDR4 8GB, SSD 256GB)
- Y√™u c·∫ßu th√™m n·∫øu c√≥ (b·∫£o h√†nh, l·∫Øp ƒë·∫∑t, v.v.)

B·∫°n c√≥ th·ªÉ cho m√¨nh bi·∫øt b·∫°n c·∫ßn mua s·∫£n ph·∫©m g√¨ kh√¥ng ·∫°?`);
                    return res.status(200).send("EVENT_RECEIVED");
                }

                // Ki·ªÉm tra n·∫øu l√† tin nh·∫Øn x√°c nh·∫≠n ƒë∆°n h√†ng
                if (isOrderConfirmation(userMsg)) {
                    const currentOrder = getOrder(senderId);
                    if (!currentOrder) {
                        await sendMessage(senderId, "Xin l·ªói, t√¥i ch∆∞a nh·∫≠n ƒë∆∞·ª£c th√¥ng tin ƒë∆°n h√†ng c·ªßa b·∫°n. Vui l√≤ng cung c·∫•p th√¥ng tin ƒë·∫∑t h√†ng tr∆∞·ªõc ·∫°.");
                        return res.status(200).send("EVENT_RECEIVED");
                    }

                    const missingFields = validateOrder(currentOrder);
                    if (missingFields.length > 0) {
                        await sendMessage(senderId, `ƒê·ªÉ ho√†n t·∫•t ƒë∆°n h√†ng, vui l√≤ng cung c·∫•p th√™m th√¥ng tin sau:\n${missingFields.map(field => `- ${field}`).join('\n')}`);
                        return res.status(200).send("EVENT_RECEIVED");
                    }

                    try {
                        // T·∫°o ƒë∆°n h√†ng trong database
                        const order = await createOrder(senderId, currentOrder);

                        // G·ª≠i th√¥ng b√°o x√°c nh·∫≠n
                        await sendMessage(senderId, `üéâ ƒê∆°n h√†ng #${order.order_id} ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!

üì¶ Chi ti·∫øt ƒë∆°n h√†ng:
üßë Ng∆∞·ªùi nh·∫≠n: ${order.destination.receiver_name}
üìû SƒêT: ${order.destination.receiver_phone}
üìç ƒê·ªãa ch·ªâ: ${order.destination.address.house_number} ${order.destination.address.street}, ${order.destination.address.ward_code}, ${order.destination.address.district_id}, ${order.destination.address.province_id}
üõí S·∫£n ph·∫©m: ${currentOrder.products}
${currentOrder.extra ? `üìù Ghi ch√∫: ${currentOrder.extra}\n` : ''}
‚è∞ Th·ªùi gian giao h√†ng d·ª± ki·∫øn: ${order.estimated_delivery_time.toLocaleString('vi-VN')}

üìû Nh√¢n vi√™n c·ªßa shop s·∫Ω li√™n h·ªá v·ªõi b·∫°n ƒë·ªÉ x√°c nh·∫≠n l·∫°i ƒë∆°n h√†ng trong th·ªùi gian s·ªõm nh·∫•t.
‚ùì N·∫øu c·∫ßn h·ªó tr·ª£, vui l√≤ng li√™n h·ªá hotline: 1900.xxxx`);

                        // X√≥a ƒë∆°n h√†ng t·∫°m th·ªùi
                        clearOrder(senderId);
                    } catch (error) {
                        console.error('L·ªói khi t·∫°o ƒë∆°n h√†ng:', error);
                        await sendMessage(senderId, "‚ùå R·∫•t ti·∫øc ƒë√£ x·∫£y ra l·ªói khi t·∫°o ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá hotline c·ªßa shop ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.");
                    }

                    return res.status(200).send("EVENT_RECEIVED");
                }

                try {
                    const currentOrder = getOrder(senderId);
                    const aiData = await parseOrderFromMessage(userMsg, currentOrder);

                    if (!aiData) {
                        if (currentOrder) {
                            const missingFields = validateOrder(currentOrder);
                            await sendMessage(senderId, `T√¥i ch∆∞a hi·ªÉu r√µ th√¥ng tin b·∫°n v·ª´a cung c·∫•p. B·∫°n vui l√≤ng cung c·∫•p c√°c th√¥ng tin c√≤n thi·∫øu:\n${missingFields.map(field => `- ${field}`).join('\n')}`);
                        } else {
                            await sendMessage(senderId, "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu r√µ y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ cho m√¨nh bi·∫øt c·ª• th·ªÉ h∆°n v·ªÅ s·∫£n ph·∫©m b·∫°n c·∫ßn mua ƒë∆∞·ª£c kh√¥ng ·∫°?");
                        }
                        return res.status(200).send("EVENT_RECEIVED");
                    }

                    // C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng
                    const updatedOrder = updateOrder(senderId, aiData);
                    const missingFields = validateOrder(updatedOrder);

                    if (missingFields.length > 0) {
                        await sendMessage(senderId, `C·∫£m ∆°n b·∫°n ƒë√£ cung c·∫•p th√¥ng tin. ƒê·ªÉ ho√†n t·∫•t ƒë∆°n h√†ng, vui l√≤ng cung c·∫•p th√™m:\n${missingFields.map(field => `- ${field}`).join('\n')}`);
                    } else {
                        await sendMessage(senderId, createOrderConfirmMessage(updatedOrder));
                    }

                } catch (error) {
                    console.error("‚ùå L·ªói x·ª≠ l√Ω AI:", error.message);
                    await sendMessage(senderId, "Xin l·ªói, h·ªá th·ªëng ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá hotline c·ªßa shop ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.");
                }
            }
        }

        res.status(200).send("EVENT_RECEIVED");
    } else {
        res.sendStatus(404);
    }
});

// ‚û§ G·ª≠i tin nh·∫Øn l·∫°i cho Facebook User
async function sendMessage(recipientId, messageText) {
    try {
        const url = `https://graph.facebook.com/v17.0/me/messages?access_token=${PAGE_ACCESS_TOKEN}`;
        const response = await axios.post(url, {
            recipient: { id: recipientId },
            message: { text: messageText }
        });
        console.log("‚úÖ G·ª≠i tin nh·∫Øn th√†nh c√¥ng");
    } catch (err) {
        console.error("‚ùå G·ª≠i tin nh·∫Øn th·∫•t b·∫°i:", err.response?.data?.error?.message || err.message);
    }
}

module.exports = router;